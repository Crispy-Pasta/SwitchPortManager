# Dell Port Tracer CD Pipeline - DISABLED
# Production deployment workflow (managed by DevOps)
# TODO: Re-enable when ready to use automated deployment

# DISABLED - name: üöÄ CD - Deploy to Production

on:
  workflow_run:
    workflows: ["üîç CI - Test and Build"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/port-tracer

jobs:
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to Production
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}
        run: |
          ssh -o StrictHostKeyChecking=no janzen@10.50.0.225 << 'EOF'
          set -e
          echo "üöÄ Starting Port Tracer Deployment..."
          
          # Configuration
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          BACKUP_DIR="/opt/dell-port-tracer/backups/$(date +%Y%m%d-%H%M%S)"
          
          # Create backup
          sudo mkdir -p "$BACKUP_DIR"
          docker exec dell-port-tracer-postgres-dev pg_dump -U dell_tracer_user -d port_tracer_db > "$BACKUP_DIR/database_backup.sql"
          
          # Update and restart services
          cd /opt/dell-port-tracer
          docker compose down --remove-orphans
          docker pull $IMAGE_TAG
          sed -i "s|build: \\.|image: $IMAGE_TAG|g" docker-compose.yml
          docker compose up -d
          
          # Health check
          sleep 30
          if curl -f http://localhost:5000/health; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Health check failed - rolling back..."
            docker compose down
            sed -i "s|image: $IMAGE_TAG|build: .|g" docker-compose.yml
            docker compose up -d
            exit 1
          fi
          
          # Cleanup
          docker image prune -f
          echo "üéâ Deployment completed!"
          EOF
      
      - name: Notify Success
        if: success()
        run: echo "‚úÖ Production deployment completed successfully!"
