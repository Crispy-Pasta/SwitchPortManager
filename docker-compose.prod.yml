version: '3.8'

# Dell Switch Port Tracer v2.1.8 - Production Docker Compose Configuration
# Features: Enhanced health checks, data protection, consistent naming, safe deployment structure
# Usage: Use with ./deploy-safe.sh for protected deployments
# Data: Protected files in ./data/ directory, persistent named volumes
# Health: Enhanced health checks with database and application connectivity validation

services:
  postgres:
    image: postgres:15-alpine
    container_name: dell-port-tracer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-port_tracer_db}
      POSTGRES_USER: ${POSTGRES_USER:-porttracer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-porttracer_pass}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # Named volume for consistent database persistence
      - postgres_data_persistent:/var/lib/postgresql/data
      # Protected backups directory
      - ./backups:/backups
    networks:
      - dell-port-tracer
    # Enhanced PostgreSQL health check with specific database verification
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-porttracer_user} -d ${POSTGRES_DB:-port_tracer_db} && psql -h localhost -U ${POSTGRES_USER:-porttracer_user} -d ${POSTGRES_DB:-port_tracer_db} -c 'SELECT 1;' > /dev/null"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dell-port-tracer-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - FLASK_ENV=production
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-true}
      - SESSION_COOKIE_HTTPONLY=${SESSION_COOKIE_HTTPONLY:-true}
      - SESSION_COOKIE_SAMESITE=${SESSION_COOKIE_SAMESITE:-Strict}
      - PERMANENT_SESSION_LIFETIME=${PERMANENT_SESSION_LIFETIME:-5}
      - SWITCH_USERNAME=${SWITCH_USERNAME}
      - SWITCH_PASSWORD=${SWITCH_PASSWORD}
      - OSS_PASSWORD=${OSS_PASSWORD:-oss123}
      - NETADMIN_PASSWORD=${NETADMIN_PASSWORD:-netadmin123}
      - SUPERADMIN_PASSWORD=${SUPERADMIN_PASSWORD:-superadmin123}
      - WEB_PASSWORD=${WEB_PASSWORD:-password}
      - CPU_GREEN_THRESHOLD=${CPU_GREEN_THRESHOLD:-40}
      - CPU_YELLOW_THRESHOLD=${CPU_YELLOW_THRESHOLD:-60}
      - CPU_RED_THRESHOLD=${CPU_RED_THRESHOLD:-80}
      - MAX_CONCURRENT_SWITCHES=${MAX_CONCURRENT_SWITCHES:-8}
      - GLOBAL_MAX_CONCURRENT=${GLOBAL_MAX_CONCURRENT:-64}
    volumes:
      # Application logs (persistent)
      - ./logs:/app/logs:rw
      # Protected backups directory
      - ./backups:/app/backups:rw
      # Protected data directory (read-only for sensitive files)
      - ./data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dell-port-tracer
    # Enhanced health check with database connectivity and application readiness
    healthcheck:
      test: |
        curl -f http://localhost:5000/health &&
        python3 -c "
        import os, sys
        try:
            import psycopg2
            # Test database connection with actual credentials
            conn = psycopg2.connect(
                host='postgres',
                port=5432,
                database=os.getenv('POSTGRES_DB', 'port_tracer_db'),
                user=os.getenv('POSTGRES_USER', 'porttracer_user'),
                password=os.getenv('POSTGRES_PASSWORD', 'porttracer_pass')
            )
            cur = conn.cursor()
            cur.execute('SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = %s', ('public',))
            table_count = cur.fetchone()[0]
            cur.close()
            conn.close()
            if table_count < 3:  # Expect at least site, floor, switch tables
                print(f'Database schema incomplete: only {table_count} tables found')
                sys.exit(1)
            print(f'Database connectivity: OK ({table_count} tables)')
        except ImportError:
            print('psycopg2 not available, skipping database connectivity check')
        except Exception as e:
            print(f'Database connectivity: FAILED - {e}')
            sys.exit(1)
        "
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:alpine
    container_name: dell-port-tracer-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      # Nginx configuration
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Protected SSL certificates (fallback to both locations)
      - ./data/ssl:/etc/nginx/ssl:ro
      - ./ssl:/etc/nginx/ssl:ro
      # Nginx logs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - dell-port-tracer
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dell-port-tracer:
    driver: bridge

volumes:
  # Named volume with consistent name for database persistence
  # This survives container rebuilds and prevents data loss
  postgres_data_persistent:
    driver: local
    name: dell_port_tracer_postgres_data
