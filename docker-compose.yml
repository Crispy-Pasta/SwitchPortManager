version: '3.8'

# Dell Switch Port Tracer v2.2.0 - Development Docker Compose Configuration
# Features: Enhanced UI/UX, VLAN Management v2, Safe deployment structure
# Data Protection: Uses .env files and persistent volumes
# Production: Use docker-compose.prod.yml for production deployments

services:
  postgres:
    image: postgres:15-alpine
    container_name: dell-port-tracer-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-port_tracer_db}
      POSTGRES_USER: ${POSTGRES_USER:-dell_tracer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password123}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - dell-port-tracer
    restart: unless-stopped
    # Enhanced PostgreSQL health check with database query validation
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-dell_tracer_user} -d ${POSTGRES_DB:-port_tracer_db} && psql -h localhost -U ${POSTGRES_USER:-dell_tracer_user} -d ${POSTGRES_DB:-port_tracer_db} -c 'SELECT 1;' > /dev/null"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  app:
    build: .
    container_name: dell-port-tracer-app-dev
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dell-port-tracer
    restart: unless-stopped
    # Enhanced health check with database connectivity validation (simplified for development)
    healthcheck:
      test: |
        curl -f http://localhost:5000/health &&
        python3 -c "
        import os, sys
        try:
            import psycopg2
            # Test database connection for development
            conn = psycopg2.connect(
                host='postgres',
                port=5432,
                database=os.getenv('POSTGRES_DB', 'port_tracer_db'),
                user=os.getenv('POSTGRES_USER', 'dell_tracer_user'),
                password=os.getenv('POSTGRES_PASSWORD', 'secure_password123')
            )
            cur = conn.cursor()
            cur.execute('SELECT 1')
            cur.close()
            conn.close()
            print('Database connectivity: OK')
        except ImportError:
            print('psycopg2 not available, skipping database connectivity check')
        except Exception as e:
            print(f'Database connectivity: FAILED - {e}')
            sys.exit(1)
        "
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s

volumes:
  postgres_data:
    driver: local

networks:
  dell-port-tracer:
    driver: bridge
